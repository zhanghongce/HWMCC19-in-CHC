	(output dir: /scratch/network/hongcez/hwmcc/avr-log/btor2/bv/mann/data-integrity/unsafe/pr_circular_pointer_top_w8_d32_e0/work_w1)
	(frontend: btor2)
	(property: all (1 assertions))
	(1 / 303 flops initialized)
	(abstraction: sa+uf)
	(bmc: safe till step 0)
	(bmc: safe till step 10)
	(bmc: safe till step 20)
	(bmc: safe till step 30)
	(bmc: found cex at step 35)
   0	: 0	: 0 s: 0    898s                  

AVR -- Proof Race 
copyright (c) 2019  Aman Goel and Karem Sakallah, University of Michigan
@     0s  (starting avr proof race)
@     0s  (output dir: /scratch/network/hongcez/hwmcc/avr-log/btor2/bv/mann/data-integrity/unsafe/pr_circular_pointer_top_w8_d32_e0)
@     0s  (max 11 workers)
@     0s  (started worker 0 with pid 145357)
@     0s  (started worker 1 with pid 145358)
@     0s  (started worker 2 with pid 145359)
@     0s  (started worker 3 with pid 145360)
@     0s  (started worker 4 with pid 145361)
@     0s  (spawned 5 workers)
@     0s  (total 5 workers using 0 MB)
@     1s  (started worker 5 with pid 145494)
@     1s  (spawned 1 workers)
@     1s  (total 6 workers using 113 MB)
@     2s  (started worker 6 with pid 145537)
@     2s  (spawned 1 workers)
@     2s  (total 7 workers using 155 MB)
@     3s  (started worker 7 with pid 145582)
@     3s  (spawned 1 workers)
@     3s  (total 8 workers using 214 MB)
@     6s  (started worker 8 with pid 145649)
@     6s  (spawned 1 workers)
@     6s  (total 9 workers using 299 MB)
@     9s  (started worker 9 with pid 145720)
@     9s  (spawned 1 workers)
@     9s  (total 10 workers using 417 MB)
@    12s  (started worker 10 with pid 145803)
@    12s  (spawned 1 workers)
@    12s  (total 11 workers using 525 MB)
@    25s  (total 11 workers using 874 MB)
@    33s  (worker 9 finished with result unknown) python3 avr.py -b bin_y2 -s -a sa4 --interpol 1 -f 1
@    41s  (total 10 workers using 1071 MB)
@    56s  (total 10 workers using 1331 MB)
@    71s  (total 10 workers using 1502 MB)
@    84s  (total 10 workers using 1712 MB)
@    99s  (total 10 workers using 1873 MB)
@   112s  (total 10 workers using 2026 MB)
@   126s  (total 10 workers using 2219 MB)
@   138s  (total 10 workers using 2319 MB)
@   152s  (total 10 workers using 2508 MB)
@   165s  (total 10 workers using 2845 MB)
@   179s  (total 10 workers using 2861 MB)
@   192s  (total 10 workers using 2960 MB)
@   206s  (total 10 workers using 3045 MB)
@   219s  (total 10 workers using 3180 MB)
@   233s  (total 10 workers using 3237 MB)
@   246s  (total 10 workers using 3378 MB)
@   260s  (total 10 workers using 3534 MB)
@   274s  (total 10 workers using 3683 MB)
@   288s  (total 10 workers using 3882 MB)
@   301s  (total 10 workers using 4050 MB)
@   315s  (total 10 workers using 4188 MB)
@   328s  (total 10 workers using 4219 MB)
@   342s  (total 10 workers using 4414 MB)
@   355s  (total 10 workers using 4493 MB)
@   369s  (total 10 workers using 4603 MB)
@   382s  (total 10 workers using 4781 MB)
@   396s  (total 10 workers using 4871 MB)
@   409s  (total 10 workers using 4952 MB)
@   423s  (total 10 workers using 5024 MB)
@   436s  (total 10 workers using 5168 MB)
@   450s  (total 10 workers using 5345 MB)
@   463s  (total 10 workers using 5420 MB)
@   477s  (total 10 workers using 5435 MB)
@   490s  (total 10 workers using 5595 MB)
@   504s  (total 10 workers using 5631 MB)
@   516s  (total 10 workers using 5707 MB)
@   530s  (total 10 workers using 5937 MB)
@   543s  (total 10 workers using 5970 MB)
@   557s  (total 10 workers using 6030 MB)
@   570s  (total 10 workers using 6142 MB)
@   584s  (total 10 workers using 6250 MB)
@   597s  (total 10 workers using 6326 MB)
@   608s  (total 10 workers using 6298 MB)
@   620s  (total 10 workers using 6461 MB)
@   631s  (total 10 workers using 6541 MB)
@   642s  (total 10 workers using 6550 MB)
@   654s  (total 10 workers using 6634 MB)
@   665s  (total 10 workers using 6652 MB)
@   677s  (total 10 workers using 6653 MB)
@   688s  (total 10 workers using 6676 MB)
@   699s  (total 10 workers using 6757 MB)
@   711s  (total 10 workers using 6792 MB)
@   722s  (total 10 workers using 6823 MB)
@   734s  (total 10 workers using 6854 MB)
@   745s  (total 10 workers using 6928 MB)
@   756s  (total 10 workers using 6955 MB)
@   768s  (total 10 workers using 6954 MB)
@   779s  (total 10 workers using 6991 MB)
@   791s  (total 10 workers using 7051 MB)
@   802s  (total 10 workers using 7146 MB)
@   813s  (total 10 workers using 7167 MB)
@   824s  (total 10 workers using 7199 MB)
@   836s  (total 10 workers using 7300 MB)
@   847s  (total 10 workers using 7273 MB)
@   858s  (total 10 workers using 7275 MB)
@   869s  (total 10 workers using 7277 MB)
@   881s  (total 10 workers using 7300 MB)
@   892s  (total 10 workers using 7334 MB)
@   903s  (total 10 workers using 7347 MB)
@   915s  (total 10 workers using 7367 MB)
@   926s  (total 10 workers using 7472 MB)
@   937s  (total 10 workers using 7477 MB)
@   949s  (total 10 workers using 7469 MB)
@   960s  (total 10 workers using 7502 MB)
@   971s  (total 10 workers using 7486 MB)
@   982s  (total 10 workers using 7486 MB)
@   983s  (worker 1 finished with result unsafe) python3 avr.py -b bin_bt_cadical -s --bmc
@   983s  (worker 1 output)
@   983s  (stopping all workers)
@   983s  (copied results from worker 1 in /scratch/network/hongcez/hwmcc/avr-log/btor2/bv/mann/data-integrity/unsafe/pr_circular_pointer_top_w8_d32_e0)
@   983s  [0;30;47m(proof race finished with answer unsafe in 983.37 seconds)[m
