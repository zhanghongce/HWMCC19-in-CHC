

;----------------------------------------
;  CHC generated from BTOR
;  Generated by COSA2 (Pono)
;----------------------------------------

(set-option :fp.engine spacer)

(define-fun Init 
    ((state25 (_ BitVec 1)) (state23 (_ BitVec 1)) (state21 (_ BitVec 1)) (state6 (_ BitVec 16)) (state19 (_ BitVec 1)) (state10 (_ BitVec 16)) (state13 (_ BitVec 1)) (state15 (_ BitVec 1)) (state8 (_ BitVec 16)) (state17 (_ BitVec 1)) (input52 (_ BitVec 1)) (input43 (_ BitVec 1)) (input37 (_ BitVec 1)) (input57 (_ BitVec 1)) (input48 (_ BitVec 1)) (input38 (_ BitVec 1)))
     Bool
     (and (and (and (and (and (and (and (and (and (= state6 (_ bv0 16)) (= state8 (_ bv0 16))) (= state10 (_ bv0 16))) (= state13 (_ bv0 1))) (= state15 (_ bv0 1))) (= state17 (_ bv0 1))) (= state19 (_ bv0 1))) (= state21 (_ bv0 1))) (= state23 (_ bv0 1))) (= state25 (_ bv0 1))))
(define-fun Trans 
    ((state25 (_ BitVec 1)) (state23 (_ BitVec 1)) (state21 (_ BitVec 1)) (state6 (_ BitVec 16)) (state19 (_ BitVec 1)) (state10 (_ BitVec 16)) (state13 (_ BitVec 1)) (state15 (_ BitVec 1)) (state8 (_ BitVec 16)) (state17 (_ BitVec 1)) (input52 (_ BitVec 1)) (input43 (_ BitVec 1)) (input37 (_ BitVec 1)) (input57 (_ BitVec 1)) (input48 (_ BitVec 1)) (input38 (_ BitVec 1)) (state25.next (_ BitVec 1)) (state23.next (_ BitVec 1)) (state21.next (_ BitVec 1)) (state6.next (_ BitVec 16)) (state19.next (_ BitVec 1)) (state10.next (_ BitVec 16)) (state13.next (_ BitVec 1)) (state15.next (_ BitVec 1)) (state8.next (_ BitVec 16)) (state17.next (_ BitVec 1)) (input52.next (_ BitVec 1)) (input43.next (_ BitVec 1)) (input37.next (_ BitVec 1)) (input57.next (_ BitVec 1)) (input48.next (_ BitVec 1)) (input38.next (_ BitVec 1)))
    Bool
     (let ((.def_51 (bvxor (_ bv1 16) state6))) (let ((.def_100 (bvnot state13))) (let ((.def_101 (bvnot input48))) (let ((.def_104 (bvor input38 (bvand .def_100 .def_101)))) (let ((.def_109 (bvnot input43))) (let ((.def_110 (bvand (bvor state15 input48) .def_109))) (let ((.def_114 (bvnot input38))) (let ((.def_115 (bvand (bvor state17 input43) .def_114))) (let ((.def_118 (bvnot state19))) (let ((.def_119 (bvnot input57))) (let ((.def_122 (bvor input37 (bvand .def_118 .def_119)))) (let ((.def_127 (bvnot input52))) (let ((.def_128 (bvand (bvor state21 input57) .def_127))) (let ((.def_132 (bvnot input37))) (let ((.def_133 (bvand (bvor state23 input52) .def_132))) (let ((.def_140 (ite (bvult (bvashr (concat .def_51 (_ bv0 16)) (_ bv16 32)) (_ bv500 32)) (_ bv1 1) (_ bv0 1)))) (let ((.def_155 (bvor input43 input48))) (let ((.def_156 (bvor input38 .def_155))) (let ((.def_157 (bvor input57 .def_156))) (let ((.def_158 (bvor input52 .def_157))) (let ((.def_176 (bvor state15 .def_100))) (let ((.def_186 (bvor state21 .def_118))) (let ((.def_197 (bvor .def_104 .def_110))) (let ((.def_207 (bvor .def_122 .def_128))) (and (and (and (and (and (and (and (and (and (= state6.next (bvxor (_ bv1 16) (ite (= input37 (_ bv1 1)) state10 (ite (= input38 (_ bv1 1)) state8 .def_51)))) (= state8.next (ite (= input43 (_ bv1 1)) ((_ extract 15 0) (bvadd (bvashr (concat .def_51 (_ bv0 16)) (_ bv16 32)) (bvashr (concat state8 (_ bv0 16)) (_ bv16 32)))) (ite (= input48 (_ bv1 1)) .def_51 state8)))) (= state10.next (ite (= input52 (_ bv1 1)) ((_ extract 15 0) (bvadd (bvashr (concat .def_51 (_ bv0 16)) (_ bv16 32)) (bvashr (concat state10 (_ bv0 16)) (_ bv16 32)))) (ite (= input57 (_ bv1 1)) .def_51 state10)))) (= state13.next (bvnot .def_104))) (= state15.next .def_110)) (= state17.next .def_115)) (= state19.next (bvnot .def_122))) (= state21.next .def_128)) (= state23.next .def_133)) (= state25.next (bvnot (bvand (bvnot state25) (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvand (bvor .def_101 (bvand .def_100 .def_140)) (bvor state15 .def_109)) (bvor state17 .def_114)) (bvor .def_119 (bvand .def_118 .def_140))) (bvor state21 .def_127)) (bvor state23 .def_132)) (bvor input37 .def_158)) (bvnot (bvor (bvor (bvor (bvor (bvand input43 input48) (bvand input38 .def_155)) (bvand input57 .def_156)) (bvand input52 .def_157)) (bvand input37 .def_158)))) (bvand (bvand (bvand (bvor state17 .def_176) (bvnot (bvor (bvand state15 .def_100) (bvand state17 .def_176)))) (bvnot (bvor (bvand state21 .def_118) (bvand state23 .def_186)))) (bvor state23 .def_186))) (bvand (bvand (bvand (bvor .def_115 .def_197) (bvnot (bvor (bvand .def_104 .def_110) (bvand .def_115 .def_197)))) (bvnot (bvor (bvand .def_122 .def_128) (bvand .def_133 .def_207)))) (bvor .def_133 .def_207))))))))))))))))))))))))))))))))
(define-fun P 
   ((state25 (_ BitVec 1)) (state23 (_ BitVec 1)) (state21 (_ BitVec 1)) (state6 (_ BitVec 16)) (state19 (_ BitVec 1)) (state10 (_ BitVec 16)) (state13 (_ BitVec 1)) (state15 (_ BitVec 1)) (state8 (_ BitVec 16)) (state17 (_ BitVec 1)) (input52 (_ BitVec 1)) (input43 (_ BitVec 1)) (input37 (_ BitVec 1)) (input57 (_ BitVec 1)) (input48 (_ BitVec 1)) (input38 (_ BitVec 1)))
    Bool
     (not (= (bvand (bvcomp (_ bv849 32) (bvashr (concat (bvxor (_ bv1 16) state6) (_ bv0 16)) (_ bv16 32))) (bvnot state25)) (_ bv1 1))))

(declare-var state25 (_ BitVec 1))
(declare-var state23 (_ BitVec 1))
(declare-var state21 (_ BitVec 1))
(declare-var state6 (_ BitVec 16))
(declare-var state19 (_ BitVec 1))
(declare-var state10 (_ BitVec 16))
(declare-var state13 (_ BitVec 1))
(declare-var state15 (_ BitVec 1))
(declare-var state8 (_ BitVec 16))
(declare-var state17 (_ BitVec 1))

(declare-var state25.next (_ BitVec 1))
(declare-var state23.next (_ BitVec 1))
(declare-var state21.next (_ BitVec 1))
(declare-var state6.next (_ BitVec 16))
(declare-var state19.next (_ BitVec 1))
(declare-var state10.next (_ BitVec 16))
(declare-var state13.next (_ BitVec 1))
(declare-var state15.next (_ BitVec 1))
(declare-var state8.next (_ BitVec 16))
(declare-var state17.next (_ BitVec 1))

(declare-var input52 (_ BitVec 1))
(declare-var input43 (_ BitVec 1))
(declare-var input37 (_ BitVec 1))
(declare-var input57 (_ BitVec 1))
(declare-var input48 (_ BitVec 1))
(declare-var input38 (_ BitVec 1))
(declare-var input52.next (_ BitVec 1))
(declare-var input43.next (_ BitVec 1))
(declare-var input37.next (_ BitVec 1))
(declare-var input57.next (_ BitVec 1))
(declare-var input48.next (_ BitVec 1))
(declare-var input38.next (_ BitVec 1))


(declare-rel INV ((_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 16) (_ BitVec 1) (_ BitVec 16) (_ BitVec 1) (_ BitVec 1) (_ BitVec 16) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1)))
(declare-rel fail ())

(rule (=> 
  (Init state25 state23 state21 state6 state19 state10 state13 state15 state8 state17 input52 input43 input37 input57 input48 input38)
  (INV  state25 state23 state21 state6 state19 state10 state13 state15 state8 state17 input52 input43 input37 input57 input48 input38)))

(rule (=> (and
  (INV  state25 state23 state21 state6 state19 state10 state13 state15 state8 state17 input52 input43 input37 input57 input48 input38)
  (Trans state25 state23 state21 state6 state19 state10 state13 state15 state8 state17 input52 input43 input37 input57 input48 input38 state25.next state23.next state21.next state6.next state19.next state10.next state13.next state15.next state8.next state17.next input52.next input43.next input37.next input57.next input48.next input38.next))
  (INV  state25.next state23.next state21.next state6.next state19.next state10.next state13.next state15.next state8.next state17.next input52.next input43.next input37.next input57.next input48.next input38.next)))

(rule (=> (and
  (INV state25 state23 state21 state6 state19 state10 state13 state15 state8 state17 input52 input43 input37 input57 input48 input38) 
  (not (P state25 state23 state21 state6 state19 state10 state13 state15 state8 state17 input52 input43 input37 input57 input48 input38)))
  fail))

(query fail :print-certificate true)

