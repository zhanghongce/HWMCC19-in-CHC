

;----------------------------------------
;  CHC generated from BTOR
;  Generated by COSA2 (Pono)
;----------------------------------------

(set-option :fp.engine spacer)

(define-fun Init 
    ((state74 (_ BitVec 8)) (state65 (_ BitVec 1)) (state72 (_ BitVec 8)) (state63 (_ BitVec 1)) (state70 (_ BitVec 8)) (state61 (_ BitVec 1)) (state68 (_ BitVec 8)) (state58 (_ BitVec 1)) (state56 (_ BitVec 8)) (state54 (_ BitVec 8)) (state12 (_ BitVec 8)) (state20 (_ BitVec 8)) (state26 (_ BitVec 8)) (state15 (_ BitVec 8)) (state50 (_ BitVec 8)) (state52 (_ BitVec 8)) (input10 (_ BitVec 1)) (input4 (_ BitVec 2)) (input2 (_ BitVec 8)) (input6 (_ BitVec 1)) (input7 (_ BitVec 8)) (input8 (_ BitVec 2)) (input9 (_ BitVec 2)))
     Bool
     (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= state12 (_ bv0 8)) (= state15 (_ bv0 8))) (= state20 (_ bv0 8))) (= state26 (_ bv0 8))) (= state50 (_ bv1 8))) (= state52 (_ bv0 8))) (= state54 (_ bv0 8))) (= state56 (_ bv0 8))) (= state58 (_ bv1 1))) (= state61 (_ bv0 1))) (= state63 (_ bv0 1))) (= state65 (_ bv0 1))) (= state68 (_ bv0 8))) (= state70 (_ bv0 8))) (= state72 (_ bv0 8))) (= state74 (_ bv0 8))))
(define-fun Trans 
    ((state74 (_ BitVec 8)) (state65 (_ BitVec 1)) (state72 (_ BitVec 8)) (state63 (_ BitVec 1)) (state70 (_ BitVec 8)) (state61 (_ BitVec 1)) (state68 (_ BitVec 8)) (state58 (_ BitVec 1)) (state56 (_ BitVec 8)) (state54 (_ BitVec 8)) (state12 (_ BitVec 8)) (state20 (_ BitVec 8)) (state26 (_ BitVec 8)) (state15 (_ BitVec 8)) (state50 (_ BitVec 8)) (state52 (_ BitVec 8)) (input10 (_ BitVec 1)) (input4 (_ BitVec 2)) (input2 (_ BitVec 8)) (input6 (_ BitVec 1)) (input7 (_ BitVec 8)) (input8 (_ BitVec 2)) (input9 (_ BitVec 2)) (state74.next (_ BitVec 8)) (state65.next (_ BitVec 1)) (state72.next (_ BitVec 8)) (state63.next (_ BitVec 1)) (state70.next (_ BitVec 8)) (state61.next (_ BitVec 1)) (state68.next (_ BitVec 8)) (state58.next (_ BitVec 1)) (state56.next (_ BitVec 8)) (state54.next (_ BitVec 8)) (state12.next (_ BitVec 8)) (state20.next (_ BitVec 8)) (state26.next (_ BitVec 8)) (state15.next (_ BitVec 8)) (state50.next (_ BitVec 8)) (state52.next (_ BitVec 8)) (input10.next (_ BitVec 1)) (input4.next (_ BitVec 2)) (input2.next (_ BitVec 8)) (input6.next (_ BitVec 1)) (input7.next (_ BitVec 8)) (input8.next (_ BitVec 2)) (input9.next (_ BitVec 2)))
    Bool
     (let ((.def_96 (= state58 (_ bv1 1)))) (let ((.def_128 (bvult state50 input2))) (let ((.def_132 (= (bvcomp state68 input2) (_ bv1 1)))) (let ((.def_136 (= (bvcomp input4 (_ bv0 2)) (_ bv1 1)))) (let ((.def_140 (bvult state52 input2))) (let ((.def_144 (= (bvcomp state70 input2) (_ bv1 1)))) (let ((.def_148 (= (bvcomp input4 (_ bv1 2)) (_ bv1 1)))) (let ((.def_153 (bvult state54 input2))) (let ((.def_157 (= (bvcomp state72 input2) (_ bv1 1)))) (let ((.def_161 (= (bvcomp input4 (_ bv2 2)) (_ bv1 1)))) (let ((.def_166 (bvult state56 input2))) (let ((.def_170 (= (bvcomp state74 input2) (_ bv1 1)))) (let ((.def_174 (= (bvcomp input4 (_ bv3 2)) (_ bv1 1)))) (let ((.def_199 (bvult state50 input7))) (let ((.def_204 (= (bvcomp input8 (_ bv0 2)) (_ bv1 1)))) (let ((.def_205 (ite .def_204 (ite .def_96 (ite .def_199 (_ bv0 1) state58) state58) state58))) (let ((.def_212 (bvult state52 input7))) (let ((.def_215 (= state61 (_ bv1 1)))) (let ((.def_218 (= (bvcomp input8 (_ bv1 2)) (_ bv1 1)))) (let ((.def_219 (ite .def_218 (ite .def_215 (ite .def_212 (_ bv0 1) state61) state61) state61))) (let ((.def_226 (bvult state54 input7))) (let ((.def_229 (= state63 (_ bv1 1)))) (let ((.def_232 (= (bvcomp input8 (_ bv2 2)) (_ bv1 1)))) (let ((.def_233 (ite .def_232 (ite .def_229 (ite .def_226 (_ bv0 1) state63) state63) state63))) (let ((.def_240 (bvult state56 input7))) (let ((.def_243 (= state65 (_ bv1 1)))) (let ((.def_246 (= (bvcomp input8 (_ bv3 2)) (_ bv1 1)))) (let ((.def_247 (ite .def_246 (ite .def_243 (ite .def_240 (_ bv0 1) state65) state65) state65))) (let ((.def_254 (= (bvcomp input9 (_ bv0 2)) (_ bv1 1)))) (let ((.def_258 (ite .def_204 (ite .def_96 (ite .def_199 (ite .def_254 input7 state68) state68) state68) state68))) (let ((.def_259 (= input10 (_ bv1 1)))) (let ((.def_262 (ite .def_136 (ite .def_132 (ite .def_259 (_ bv0 8) state68) .def_258) .def_258))) (let ((.def_266 (ite .def_218 (ite .def_215 (ite .def_212 (ite .def_254 input7 .def_262) .def_262) .def_262) .def_262))) (let ((.def_270 (ite .def_232 (ite .def_229 (ite .def_226 (ite .def_254 input7 .def_266) .def_266) .def_266) .def_266))) (let ((.def_278 (= (bvcomp input9 (_ bv1 2)) (_ bv1 1)))) (let ((.def_282 (ite .def_204 (ite .def_96 (ite .def_199 (ite .def_278 input7 state70) state70) state70) state70))) (let ((.def_286 (ite .def_218 (ite .def_215 (ite .def_212 (ite .def_278 input7 .def_282) .def_282) .def_282) .def_282))) (let ((.def_289 (ite .def_148 (ite .def_144 (ite .def_259 (_ bv0 8) state70) .def_286) .def_286))) (let ((.def_293 (ite .def_232 (ite .def_229 (ite .def_226 (ite .def_278 input7 .def_289) .def_289) .def_289) .def_289))) (let ((.def_301 (= (bvcomp input9 (_ bv2 2)) (_ bv1 1)))) (let ((.def_305 (ite .def_204 (ite .def_96 (ite .def_199 (ite .def_301 input7 state72) state72) state72) state72))) (let ((.def_309 (ite .def_218 (ite .def_215 (ite .def_212 (ite .def_301 input7 .def_305) .def_305) .def_305) .def_305))) (let ((.def_313 (ite .def_232 (ite .def_229 (ite .def_226 (ite .def_301 input7 .def_309) .def_309) .def_309) .def_309))) (let ((.def_316 (ite .def_161 (ite .def_157 (ite .def_259 (_ bv0 8) state72) .def_313) .def_313))) (let ((.def_324 (= (bvcomp input9 (_ bv3 2)) (_ bv1 1)))) (let ((.def_328 (ite .def_204 (ite .def_96 (ite .def_199 (ite .def_324 input7 state74) state74) state74) state74))) (let ((.def_332 (ite .def_218 (ite .def_215 (ite .def_212 (ite .def_324 input7 .def_328) .def_328) .def_328) .def_328))) (let ((.def_336 (ite .def_232 (ite .def_229 (ite .def_226 (ite .def_324 input7 .def_332) .def_332) .def_332) .def_332))) (let ((.def_340 (ite .def_246 (ite .def_243 (ite .def_240 (ite .def_324 input7 .def_336) .def_336) .def_336) .def_336))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= state12.next (ite .def_136 (ite .def_132 (ite .def_128 input2 state12) state12) state12)) (= state15.next (ite .def_148 (ite .def_144 (ite .def_140 input2 state15) state15) state15))) (= state20.next (ite .def_161 (ite .def_157 (ite .def_153 input2 state20) state20) state20))) (= state26.next (ite .def_174 (ite .def_170 (ite .def_166 input2 state26) state26) state26))) (= state50.next (ite .def_136 (ite .def_132 (ite .def_128 input2 state50) state50) state50))) (= state52.next (ite .def_148 (ite .def_144 (ite .def_140 input2 state52) state52) state52))) (= state54.next (ite .def_161 (ite .def_157 (ite .def_153 input2 state54) state54) state54))) (= state56.next (ite .def_174 (ite .def_170 (ite .def_166 input2 state56) state56) state56))) (= state58.next (ite .def_136 (ite .def_132 (ite .def_128 (_ bv1 1) .def_205) .def_205) .def_205))) (= state61.next (ite .def_148 (ite .def_144 (ite .def_140 (_ bv1 1) .def_219) .def_219) .def_219))) (= state63.next (ite .def_161 (ite .def_157 (ite .def_153 (_ bv1 1) .def_233) .def_233) .def_233))) (= state65.next (ite .def_174 (ite .def_170 (ite .def_166 (_ bv1 1) .def_247) .def_247) .def_247))) (= state68.next (ite .def_246 (ite .def_243 (ite .def_240 (ite .def_254 input7 .def_270) .def_270) .def_270) .def_270))) (= state70.next (ite .def_246 (ite .def_243 (ite .def_240 (ite .def_278 input7 .def_293) .def_293) .def_293) .def_293))) (= state72.next (ite .def_246 (ite .def_243 (ite .def_240 (ite .def_301 input7 .def_316) .def_316) .def_316) .def_316))) (= state74.next (ite .def_174 (ite .def_170 (ite .def_259 (_ bv0 8) state74) .def_340) .def_340)))))))))))))))))))))))))))))))))))))))))))))))))))))
(define-fun P 
   ((state74 (_ BitVec 8)) (state65 (_ BitVec 1)) (state72 (_ BitVec 8)) (state63 (_ BitVec 1)) (state70 (_ BitVec 8)) (state61 (_ BitVec 1)) (state68 (_ BitVec 8)) (state58 (_ BitVec 1)) (state56 (_ BitVec 8)) (state54 (_ BitVec 8)) (state12 (_ BitVec 8)) (state20 (_ BitVec 8)) (state26 (_ BitVec 8)) (state15 (_ BitVec 8)) (state50 (_ BitVec 8)) (state52 (_ BitVec 8)) (input10 (_ BitVec 1)) (input4 (_ BitVec 2)) (input2 (_ BitVec 8)) (input6 (_ BitVec 1)) (input7 (_ BitVec 8)) (input8 (_ BitVec 2)) (input9 (_ BitVec 2)))
    Bool
     (let ((.def_26 (bvcomp state12 (_ bv0 8)))) (let ((.def_55 (bvcomp state15 (_ bv0 8)))) (not (= (bvand (bvand (bvand (bvand (bvand (bvor .def_26 (ite (not (= state12 state15)) (_ bv1 1) (_ bv0 1))) (bvor .def_26 (ite (not (= state12 state20)) (_ bv1 1) (_ bv0 1)))) (bvor .def_26 (ite (not (= state12 state26)) (_ bv1 1) (_ bv0 1)))) (bvor .def_55 (ite (not (= state15 state20)) (_ bv1 1) (_ bv0 1)))) (bvor .def_55 (ite (not (= state15 state26)) (_ bv1 1) (_ bv0 1)))) (bvor (bvcomp state20 (_ bv0 8)) (ite (not (= state20 state26)) (_ bv1 1) (_ bv0 1)))) (_ bv0 1))))))

(declare-var state74 (_ BitVec 8))
(declare-var state65 (_ BitVec 1))
(declare-var state72 (_ BitVec 8))
(declare-var state63 (_ BitVec 1))
(declare-var state70 (_ BitVec 8))
(declare-var state61 (_ BitVec 1))
(declare-var state68 (_ BitVec 8))
(declare-var state58 (_ BitVec 1))
(declare-var state56 (_ BitVec 8))
(declare-var state54 (_ BitVec 8))
(declare-var state12 (_ BitVec 8))
(declare-var state20 (_ BitVec 8))
(declare-var state26 (_ BitVec 8))
(declare-var state15 (_ BitVec 8))
(declare-var state50 (_ BitVec 8))
(declare-var state52 (_ BitVec 8))

(declare-var state74.next (_ BitVec 8))
(declare-var state65.next (_ BitVec 1))
(declare-var state72.next (_ BitVec 8))
(declare-var state63.next (_ BitVec 1))
(declare-var state70.next (_ BitVec 8))
(declare-var state61.next (_ BitVec 1))
(declare-var state68.next (_ BitVec 8))
(declare-var state58.next (_ BitVec 1))
(declare-var state56.next (_ BitVec 8))
(declare-var state54.next (_ BitVec 8))
(declare-var state12.next (_ BitVec 8))
(declare-var state20.next (_ BitVec 8))
(declare-var state26.next (_ BitVec 8))
(declare-var state15.next (_ BitVec 8))
(declare-var state50.next (_ BitVec 8))
(declare-var state52.next (_ BitVec 8))

(declare-var input10 (_ BitVec 1))
(declare-var input4 (_ BitVec 2))
(declare-var input2 (_ BitVec 8))
(declare-var input6 (_ BitVec 1))
(declare-var input7 (_ BitVec 8))
(declare-var input8 (_ BitVec 2))
(declare-var input9 (_ BitVec 2))
(declare-var input10.next (_ BitVec 1))
(declare-var input4.next (_ BitVec 2))
(declare-var input2.next (_ BitVec 8))
(declare-var input6.next (_ BitVec 1))
(declare-var input7.next (_ BitVec 8))
(declare-var input8.next (_ BitVec 2))
(declare-var input9.next (_ BitVec 2))


(declare-rel INV ((_ BitVec 8) (_ BitVec 1) (_ BitVec 8) (_ BitVec 1) (_ BitVec 8) (_ BitVec 1) (_ BitVec 8) (_ BitVec 1) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 8) (_ BitVec 1) (_ BitVec 2) (_ BitVec 8) (_ BitVec 1) (_ BitVec 8) (_ BitVec 2) (_ BitVec 2)))
(declare-rel fail ())

(rule (=> 
  (Init state74 state65 state72 state63 state70 state61 state68 state58 state56 state54 state12 state20 state26 state15 state50 state52 input10 input4 input2 input6 input7 input8 input9)
  (INV  state74 state65 state72 state63 state70 state61 state68 state58 state56 state54 state12 state20 state26 state15 state50 state52 input10 input4 input2 input6 input7 input8 input9)))

(rule (=> (and
  (INV  state74 state65 state72 state63 state70 state61 state68 state58 state56 state54 state12 state20 state26 state15 state50 state52 input10 input4 input2 input6 input7 input8 input9)
  (Trans state74 state65 state72 state63 state70 state61 state68 state58 state56 state54 state12 state20 state26 state15 state50 state52 input10 input4 input2 input6 input7 input8 input9 state74.next state65.next state72.next state63.next state70.next state61.next state68.next state58.next state56.next state54.next state12.next state20.next state26.next state15.next state50.next state52.next input10.next input4.next input2.next input6.next input7.next input8.next input9.next))
  (INV  state74.next state65.next state72.next state63.next state70.next state61.next state68.next state58.next state56.next state54.next state12.next state20.next state26.next state15.next state50.next state52.next input10.next input4.next input2.next input6.next input7.next input8.next input9.next)))

(rule (=> (and
  (INV state74 state65 state72 state63 state70 state61 state68 state58 state56 state54 state12 state20 state26 state15 state50 state52 input10 input4 input2 input6 input7 input8 input9) 
  (not (P state74 state65 state72 state63 state70 state61 state68 state58 state56 state54 state12 state20 state26 state15 state50 state52 input10 input4 input2 input6 input7 input8 input9)))
  fail))

(query fail :print-certificate true)

