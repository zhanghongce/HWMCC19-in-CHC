

;----------------------------------------
;  CHC generated from BTOR
;  Generated by COSA2 (Pono)
;----------------------------------------

(set-option :fp.engine spacer)

(define-fun Init 
    ((state86 (_ BitVec 1)) (state56 (_ BitVec 1)) (state19 (_ BitVec 1)) (state51 (_ BitVec 1)) (state17 (_ BitVec 256)) (state22 (_ BitVec 1)) (state26 (_ BitVec 1)) (state32 (_ BitVec 256)) (witness_0 (_ BitVec 1)) (input15 (_ BitVec 1)) (input14 (_ BitVec 256)) (input12 (_ BitVec 1)) (input11 (_ BitVec 1)) (input10 (_ BitVec 3)) (input4 (_ BitVec 13)) (input2 (_ BitVec 1)) (input5 (_ BitVec 1)) (input6 (_ BitVec 1)) (input7 (_ BitVec 1)) (input9 (_ BitVec 3)))
     Bool
     (and (and (and (and (= state19 (_ bv0 1)) (= state26 (_ bv0 1))) (= witness_0 (_ bv1 1))) (= state51 (_ bv0 1))) (= state56 (_ bv0 1))))
(define-fun Trans 
    ((state86 (_ BitVec 1)) (state56 (_ BitVec 1)) (state19 (_ BitVec 1)) (state51 (_ BitVec 1)) (state17 (_ BitVec 256)) (state22 (_ BitVec 1)) (state26 (_ BitVec 1)) (state32 (_ BitVec 256)) (witness_0 (_ BitVec 1)) (input15 (_ BitVec 1)) (input14 (_ BitVec 256)) (input12 (_ BitVec 1)) (input11 (_ BitVec 1)) (input10 (_ BitVec 3)) (input4 (_ BitVec 13)) (input2 (_ BitVec 1)) (input5 (_ BitVec 1)) (input6 (_ BitVec 1)) (input7 (_ BitVec 1)) (input9 (_ BitVec 3)) (state86.next (_ BitVec 1)) (state56.next (_ BitVec 1)) (state19.next (_ BitVec 1)) (state51.next (_ BitVec 1)) (state17.next (_ BitVec 256)) (state22.next (_ BitVec 1)) (state26.next (_ BitVec 1)) (state32.next (_ BitVec 256)) (witness_0.next (_ BitVec 1)) (input15.next (_ BitVec 1)) (input14.next (_ BitVec 256)) (input12.next (_ BitVec 1)) (input11.next (_ BitVec 1)) (input10.next (_ BitVec 3)) (input4.next (_ BitVec 13)) (input2.next (_ BitVec 1)) (input5.next (_ BitVec 1)) (input6.next (_ BitVec 1)) (input7.next (_ BitVec 1)) (input9.next (_ BitVec 3)))
    Bool
     (let ((.def_41 (bvand (bvnot input2) (bvcomp input2 state22)))) (let ((.def_47 (bvand (bvand state19 .def_41) state26))) (let ((.def_48 (bvnot input5))) (let ((.def_51 (= (bvor .def_47 .def_48) (_ bv1 1)))) (let ((.def_55 ((_ extract 11 11) input4))) (let ((.def_57 (bvor .def_55 ((_ extract 12 12) input4)))) (let ((.def_59 (bvor input12 (bvnot .def_47)))) (let ((.def_65 (= input2 (_ bv1 1)))) (let ((.def_67 (= input5 (_ bv1 1)))) (let ((.def_89 (bvor input2 (bvor .def_55 ((_ extract 10 10) input4))))) (let ((.def_97 (bvand state51 (bvand .def_41 state56)))) (let ((.def_117 (bvor .def_97 (bvnot .def_89)))) (let ((.def_130 (bvcomp input9 (_ bv5 3)))) (let ((.def_140 ((_ extract 9 9) input4))) (let ((.def_144 ((_ extract 8 8) input4))) (let ((.def_175 (bvcomp input10 (_ bv5 3)))) (let ((.def_184 (bvor (bvcomp input10 (_ bv7 3)) (bvcomp input10 (_ bv6 3))))) (and (and (and (and (and (and (and (and (= witness_0.next (bvnot (ite (= (bvcomp (ite .def_51 state17 (_ bv0 256)) (ite .def_51 (ite .def_67 (ite .def_65 (ite (= .def_59 (_ bv1 1)) (_ bv0 256) state17) (ite (= (bvand .def_57 .def_59) (_ bv1 1)) state32 state17)) state17) (_ bv0 256))) (_ bv0 1)) (_ bv1 1) (_ bv0 1)))) (= state17.next (ite .def_67 (ite .def_65 (_ bv0 256) (ite (= .def_57 (_ bv1 1)) state32 state17)) state17))) (= state19.next (ite .def_67 .def_117 state19))) (= state22.next (ite .def_67 input2 state22))) (= state26.next (ite .def_67 (ite (= .def_47 (_ bv0 1)) (bvor input2 .def_57) state26) state26))) (= state32.next (ite (= (bvor .def_48 .def_117) (_ bv1 1)) state32 input14))) (= state51.next (ite .def_67 (ite (= .def_97 (_ bv0 1)) .def_89 state51) state51))) (= state56.next (ite .def_67 (bvnot (bvand (bvor (bvand (bvand .def_130 state86) (bvnot input6)) (bvor (bvand input11 .def_140) (bvor input2 .def_144))) (bvor .def_140 (bvor input2 (bvnot .def_144))))) state56))) (= state86.next (ite (= (bvor .def_48 (bvnot (bvor input2 (ite (not (= (concat (bvor (bvcomp input9 (_ bv7 3)) (bvcomp input9 (_ bv6 3))) (concat .def_130 (bvcomp input9 (_ bv4 3)))) (_ bv0 3))) (_ bv0 1) (ite (= (bvor (bvcomp input9 (_ bv3 3)) (bvcomp input9 (_ bv2 3))) (_ bv1 1)) (_ bv0 1) (ite (= (bvcomp input9 (_ bv1 3)) (_ bv1 1)) (_ bv0 1) (ite (not (= (concat .def_184 (concat .def_175 (bvcomp input10 (_ bv4 3)))) (_ bv0 3))) (ite (= .def_184 (_ bv1 1)) (_ bv0 1) (ite (= .def_175 (_ bv1 1)) (_ bv1 1) (_ bv0 1))) (_ bv0 1)))))))) (_ bv1 1)) state86 input7)))))))))))))))))))))
(define-fun P 
   ((state86 (_ BitVec 1)) (state56 (_ BitVec 1)) (state19 (_ BitVec 1)) (state51 (_ BitVec 1)) (state17 (_ BitVec 256)) (state22 (_ BitVec 1)) (state26 (_ BitVec 1)) (state32 (_ BitVec 256)) (witness_0 (_ BitVec 1)) (input15 (_ BitVec 1)) (input14 (_ BitVec 256)) (input12 (_ BitVec 1)) (input11 (_ BitVec 1)) (input10 (_ BitVec 3)) (input4 (_ BitVec 13)) (input2 (_ BitVec 1)) (input5 (_ BitVec 1)) (input6 (_ BitVec 1)) (input7 (_ BitVec 1)) (input9 (_ BitVec 3)))
    Bool
     (= witness_0 (_ bv1 1)))

(declare-var state86 (_ BitVec 1))
(declare-var state56 (_ BitVec 1))
(declare-var state19 (_ BitVec 1))
(declare-var state51 (_ BitVec 1))
(declare-var state17 (_ BitVec 256))
(declare-var state22 (_ BitVec 1))
(declare-var state26 (_ BitVec 1))
(declare-var state32 (_ BitVec 256))
(declare-var witness_0 (_ BitVec 1))

(declare-var state86.next (_ BitVec 1))
(declare-var state56.next (_ BitVec 1))
(declare-var state19.next (_ BitVec 1))
(declare-var state51.next (_ BitVec 1))
(declare-var state17.next (_ BitVec 256))
(declare-var state22.next (_ BitVec 1))
(declare-var state26.next (_ BitVec 1))
(declare-var state32.next (_ BitVec 256))
(declare-var witness_0.next (_ BitVec 1))

(declare-var input15 (_ BitVec 1))
(declare-var input14 (_ BitVec 256))
(declare-var input12 (_ BitVec 1))
(declare-var input11 (_ BitVec 1))
(declare-var input10 (_ BitVec 3))
(declare-var input4 (_ BitVec 13))
(declare-var input2 (_ BitVec 1))
(declare-var input5 (_ BitVec 1))
(declare-var input6 (_ BitVec 1))
(declare-var input7 (_ BitVec 1))
(declare-var input9 (_ BitVec 3))
(declare-var input15.next (_ BitVec 1))
(declare-var input14.next (_ BitVec 256))
(declare-var input12.next (_ BitVec 1))
(declare-var input11.next (_ BitVec 1))
(declare-var input10.next (_ BitVec 3))
(declare-var input4.next (_ BitVec 13))
(declare-var input2.next (_ BitVec 1))
(declare-var input5.next (_ BitVec 1))
(declare-var input6.next (_ BitVec 1))
(declare-var input7.next (_ BitVec 1))
(declare-var input9.next (_ BitVec 3))


(declare-rel INV ((_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 256) (_ BitVec 1) (_ BitVec 1) (_ BitVec 256) (_ BitVec 1) (_ BitVec 1) (_ BitVec 256) (_ BitVec 1) (_ BitVec 1) (_ BitVec 3) (_ BitVec 13) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 3)))
(declare-rel fail ())

(rule (=> 
  (Init state86 state56 state19 state51 state17 state22 state26 state32 witness_0 input15 input14 input12 input11 input10 input4 input2 input5 input6 input7 input9)
  (INV  state86 state56 state19 state51 state17 state22 state26 state32 witness_0 input15 input14 input12 input11 input10 input4 input2 input5 input6 input7 input9)))

(rule (=> (and
  (INV  state86 state56 state19 state51 state17 state22 state26 state32 witness_0 input15 input14 input12 input11 input10 input4 input2 input5 input6 input7 input9)
  (Trans state86 state56 state19 state51 state17 state22 state26 state32 witness_0 input15 input14 input12 input11 input10 input4 input2 input5 input6 input7 input9 state86.next state56.next state19.next state51.next state17.next state22.next state26.next state32.next witness_0.next input15.next input14.next input12.next input11.next input10.next input4.next input2.next input5.next input6.next input7.next input9.next))
  (INV  state86.next state56.next state19.next state51.next state17.next state22.next state26.next state32.next witness_0.next input15.next input14.next input12.next input11.next input10.next input4.next input2.next input5.next input6.next input7.next input9.next)))

(rule (=> (and
  (INV state86 state56 state19 state51 state17 state22 state26 state32 witness_0 input15 input14 input12 input11 input10 input4 input2 input5 input6 input7 input9) 
  (not (P state86 state56 state19 state51 state17 state22 state26 state32 witness_0 input15 input14 input12 input11 input10 input4 input2 input5 input6 input7 input9)))
  fail))

(query fail :print-certificate true)

