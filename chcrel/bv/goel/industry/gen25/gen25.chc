

;----------------------------------------
;  CHC generated from BTOR
;  Generated by COSA2 (Pono)
;----------------------------------------

(set-option :fp.engine spacer)

(define-fun Init 
    ((state92 (_ BitVec 1)) (state89 (_ BitVec 1)) (state22 (_ BitVec 1)) (state20 (_ BitVec 1)) (state35 (_ BitVec 512)) (state87 (_ BitVec 1)) (state64 (_ BitVec 1)) (witness_0 (_ BitVec 1)) (input19 (_ BitVec 1)) (input18 (_ BitVec 1)) (input17 (_ BitVec 1)) (input16 (_ BitVec 1)) (input15 (_ BitVec 1)) (input14 (_ BitVec 1)) (input13 (_ BitVec 279)) (input11 (_ BitVec 1)) (input10 (_ BitVec 1)) (input9 (_ BitVec 1)) (input3 (_ BitVec 1)) (input2 (_ BitVec 1)) (input4 (_ BitVec 1)) (input5 (_ BitVec 1)) (input6 (_ BitVec 1)) (input8 (_ BitVec 2)))
     Bool
     (and (and (and (and (= state22 (_ bv0 1)) (= state64 (_ bv0 1))) (= witness_0 (_ bv1 1))) (= state87 (_ bv0 1))) (= state89 (_ bv0 1))))
(define-fun Trans 
    ((state92 (_ BitVec 1)) (state89 (_ BitVec 1)) (state22 (_ BitVec 1)) (state20 (_ BitVec 1)) (state35 (_ BitVec 512)) (state87 (_ BitVec 1)) (state64 (_ BitVec 1)) (witness_0 (_ BitVec 1)) (input19 (_ BitVec 1)) (input18 (_ BitVec 1)) (input17 (_ BitVec 1)) (input16 (_ BitVec 1)) (input15 (_ BitVec 1)) (input14 (_ BitVec 1)) (input13 (_ BitVec 279)) (input11 (_ BitVec 1)) (input10 (_ BitVec 1)) (input9 (_ BitVec 1)) (input3 (_ BitVec 1)) (input2 (_ BitVec 1)) (input4 (_ BitVec 1)) (input5 (_ BitVec 1)) (input6 (_ BitVec 1)) (input8 (_ BitVec 2)) (state92.next (_ BitVec 1)) (state89.next (_ BitVec 1)) (state22.next (_ BitVec 1)) (state20.next (_ BitVec 1)) (state35.next (_ BitVec 512)) (state87.next (_ BitVec 1)) (state64.next (_ BitVec 1)) (witness_0.next (_ BitVec 1)) (input19.next (_ BitVec 1)) (input18.next (_ BitVec 1)) (input17.next (_ BitVec 1)) (input16.next (_ BitVec 1)) (input15.next (_ BitVec 1)) (input14.next (_ BitVec 1)) (input13.next (_ BitVec 279)) (input11.next (_ BitVec 1)) (input10.next (_ BitVec 1)) (input9.next (_ BitVec 1)) (input3.next (_ BitVec 1)) (input2.next (_ BitVec 1)) (input4.next (_ BitVec 1)) (input5.next (_ BitVec 1)) (input6.next (_ BitVec 1)) (input8.next (_ BitVec 2)))
    Bool
     (let ((.def_48 (ite (= state22 (_ bv1 1)) (_ bv0 1) input18))) (let ((.def_50 (bvnot input9))) (let ((.def_51 (bvand (bvnot input5) .def_50))) (let ((.def_55 (= (bvcomp input8 (_ bv1 2)) (_ bv1 1)))) (let ((.def_60 (bvand input15 (bvand input10 .def_50)))) (let ((.def_63 ((_ extract 282 282) state35))) (let ((.def_64 ((_ extract 283 283) state35))) (let ((.def_66 ((_ extract 284 284) state35))) (let ((.def_70 (bvor (bvor (bvand .def_63 .def_64) (bvand .def_63 .def_66)) (bvand .def_64 .def_66)))) (let ((.def_72 (bvand .def_51 (bvnot .def_70)))) (let ((.def_73 (= .def_72 (_ bv1 1)))) (let ((.def_80 (= (bvand (bvnot input15) (bvnot input16)) (_ bv1 1)))) (let ((.def_82 (= input11 (_ bv1 1)))) (let ((.def_85 (bvcomp input8 (_ bv3 2)))) (let ((.def_86 (= .def_85 (_ bv1 1)))) (let ((.def_92 (= (bvor .def_85 (bvcomp input8 (_ bv2 2))) (_ bv1 1)))) (let ((.def_93 (ite .def_92 (ite .def_86 (ite .def_82 (ite .def_80 (_ bv0 1) (bvand input17 .def_50)) (bvand input17 .def_72)) (ite .def_73 input17 .def_60)) (ite .def_55 (bvand input17 .def_51) (_ bv0 1))))) (let ((.def_96 (= input2 (_ bv1 1)))) (let ((.def_98 (= input3 (_ bv1 1)))) (let ((.def_99 (ite .def_98 (ite .def_96 (_ bv0 1) (ite (= .def_93 (_ bv1 1)) .def_48 state20)) state20))) (let ((.def_104 (bvnot input2))) (let ((.def_106 (bvand state22 .def_104))) (let ((.def_109 (bvor input4 (bvnot (bvand state64 .def_106))))) (let ((.def_153 (ite .def_92 (ite .def_86 (ite .def_82 (_ bv0 1) .def_72) .def_72) (ite .def_55 .def_51 (ite (= .def_51 (_ bv1 1)) (ite (= .def_70 (_ bv1 1)) (_ bv1 1) (bvand input10 state92)) (_ bv0 1)))))) (let ((.def_159 (bvor .def_153 (ite .def_92 (ite .def_86 (ite .def_82 (ite .def_80 (_ bv0 1) .def_50) (_ bv0 1)) (ite .def_73 (_ bv0 1) .def_60)) (_ bv0 1))))) (let ((.def_161 (= (bvor input2 .def_159) (_ bv1 1)))) (let ((.def_169 (bvnot input6))) (let ((.def_170 (bvand input5 .def_169))) (let ((.def_225 (bvnot input14))) (let ((.def_230 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 .def_225))))))) (let ((.def_232 (concat .def_225 (concat .def_225 .def_230)))) (let ((.def_561 (concat (bvand .def_232 ((_ extract 278 271) input13)) (concat (_ bv0 2) (concat (bvand .def_230 ((_ extract 270 265) input13)) (concat (_ bv0 7) (bvand (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 (concat .def_225 .def_232))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ((_ extract 264 0) input13)))))))) (and (and (and (and (and (and (and (= witness_0.next (bvnot (ite (= (bvcomp .def_99 (ite .def_98 (ite .def_96 (ite (= .def_109 (_ bv1 1)) (_ bv0 1) state20) (ite (= (bvand .def_93 .def_109) (_ bv1 1)) .def_48 state20)) state20)) (_ bv0 1)) (_ bv1 1) (_ bv0 1)))) (= state20.next .def_99)) (= state22.next (ite .def_98 (ite .def_161 (bvand .def_104 state87) state22) state22))) (= state35.next (ite .def_98 (ite .def_96 (_ bv0 512) (ite (= .def_170 (_ bv1 1)) (concat (_ bv0 224) .def_561) (ite (= .def_153 (_ bv1 1)) (concat (_ bv0 224) (ite (= input6 (_ bv1 1)) (_ bv0 288) .def_561)) state35))) state35))) (= state64.next (ite .def_98 (ite (= (bvor input2 .def_93) (_ bv1 1)) .def_106 state64) state64))) (= state87.next (ite .def_98 (ite .def_161 (bvand .def_104 state89) state87) state87))) (= state89.next (ite .def_98 (ite (= (bvor .def_153 (bvor input2 .def_170)) (_ bv1 1)) (bvnot (bvor .def_170 (bvor input2 .def_169))) state89) state89))) (= state92.next (ite .def_98 (ite .def_96 (_ bv0 1) (ite (= .def_159 (_ bv1 1)) .def_70 state92)) state92))))))))))))))))))))))))))))))))))))
(define-fun P 
   ((state92 (_ BitVec 1)) (state89 (_ BitVec 1)) (state22 (_ BitVec 1)) (state20 (_ BitVec 1)) (state35 (_ BitVec 512)) (state87 (_ BitVec 1)) (state64 (_ BitVec 1)) (witness_0 (_ BitVec 1)) (input19 (_ BitVec 1)) (input18 (_ BitVec 1)) (input17 (_ BitVec 1)) (input16 (_ BitVec 1)) (input15 (_ BitVec 1)) (input14 (_ BitVec 1)) (input13 (_ BitVec 279)) (input11 (_ BitVec 1)) (input10 (_ BitVec 1)) (input9 (_ BitVec 1)) (input3 (_ BitVec 1)) (input2 (_ BitVec 1)) (input4 (_ BitVec 1)) (input5 (_ BitVec 1)) (input6 (_ BitVec 1)) (input8 (_ BitVec 2)))
    Bool
     (= witness_0 (_ bv1 1)))

(declare-var state92 (_ BitVec 1))
(declare-var state89 (_ BitVec 1))
(declare-var state22 (_ BitVec 1))
(declare-var state20 (_ BitVec 1))
(declare-var state35 (_ BitVec 512))
(declare-var state87 (_ BitVec 1))
(declare-var state64 (_ BitVec 1))
(declare-var witness_0 (_ BitVec 1))

(declare-var state92.next (_ BitVec 1))
(declare-var state89.next (_ BitVec 1))
(declare-var state22.next (_ BitVec 1))
(declare-var state20.next (_ BitVec 1))
(declare-var state35.next (_ BitVec 512))
(declare-var state87.next (_ BitVec 1))
(declare-var state64.next (_ BitVec 1))
(declare-var witness_0.next (_ BitVec 1))

(declare-var input19 (_ BitVec 1))
(declare-var input18 (_ BitVec 1))
(declare-var input17 (_ BitVec 1))
(declare-var input16 (_ BitVec 1))
(declare-var input15 (_ BitVec 1))
(declare-var input14 (_ BitVec 1))
(declare-var input13 (_ BitVec 279))
(declare-var input11 (_ BitVec 1))
(declare-var input10 (_ BitVec 1))
(declare-var input9 (_ BitVec 1))
(declare-var input3 (_ BitVec 1))
(declare-var input2 (_ BitVec 1))
(declare-var input4 (_ BitVec 1))
(declare-var input5 (_ BitVec 1))
(declare-var input6 (_ BitVec 1))
(declare-var input8 (_ BitVec 2))
(declare-var input19.next (_ BitVec 1))
(declare-var input18.next (_ BitVec 1))
(declare-var input17.next (_ BitVec 1))
(declare-var input16.next (_ BitVec 1))
(declare-var input15.next (_ BitVec 1))
(declare-var input14.next (_ BitVec 1))
(declare-var input13.next (_ BitVec 279))
(declare-var input11.next (_ BitVec 1))
(declare-var input10.next (_ BitVec 1))
(declare-var input9.next (_ BitVec 1))
(declare-var input3.next (_ BitVec 1))
(declare-var input2.next (_ BitVec 1))
(declare-var input4.next (_ BitVec 1))
(declare-var input5.next (_ BitVec 1))
(declare-var input6.next (_ BitVec 1))
(declare-var input8.next (_ BitVec 2))


(declare-rel INV ((_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 512) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 279) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1) (_ BitVec 2)))
(declare-rel fail ())

(rule (=> 
  (Init state92 state89 state22 state20 state35 state87 state64 witness_0 input19 input18 input17 input16 input15 input14 input13 input11 input10 input9 input3 input2 input4 input5 input6 input8)
  (INV  state92 state89 state22 state20 state35 state87 state64 witness_0 input19 input18 input17 input16 input15 input14 input13 input11 input10 input9 input3 input2 input4 input5 input6 input8)))

(rule (=> (and
  (INV  state92 state89 state22 state20 state35 state87 state64 witness_0 input19 input18 input17 input16 input15 input14 input13 input11 input10 input9 input3 input2 input4 input5 input6 input8)
  (Trans state92 state89 state22 state20 state35 state87 state64 witness_0 input19 input18 input17 input16 input15 input14 input13 input11 input10 input9 input3 input2 input4 input5 input6 input8 state92.next state89.next state22.next state20.next state35.next state87.next state64.next witness_0.next input19.next input18.next input17.next input16.next input15.next input14.next input13.next input11.next input10.next input9.next input3.next input2.next input4.next input5.next input6.next input8.next))
  (INV  state92.next state89.next state22.next state20.next state35.next state87.next state64.next witness_0.next input19.next input18.next input17.next input16.next input15.next input14.next input13.next input11.next input10.next input9.next input3.next input2.next input4.next input5.next input6.next input8.next)))

(rule (=> (and
  (INV state92 state89 state22 state20 state35 state87 state64 witness_0 input19 input18 input17 input16 input15 input14 input13 input11 input10 input9 input3 input2 input4 input5 input6 input8) 
  (not (P state92 state89 state22 state20 state35 state87 state64 witness_0 input19 input18 input17 input16 input15 input14 input13 input11 input10 input9 input3 input2 input4 input5 input6 input8)))
  fail))

(query fail :print-certificate true)

