

(set-logic HORN)
(declare-fun INV ((_ BitVec 4) (_ BitVec 4) (_ BitVec 1) (_ BitVec 16) (_ BitVec 1) (_ BitVec 16) (_ BitVec 1) (_ BitVec 1) (_ BitVec 1)) Bool)

(assert (forall ((state100 (_ BitVec 4)) (state97 (_ BitVec 4)) (witness_0 (_ BitVec 1)) (state76 (_ BitVec 16)) (state5 (_ BitVec 1)) (state17 (_ BitVec 16)) (input4 (_ BitVec 1)) (input2 (_ BitVec 1)) (input3 (_ BitVec 1)) (state100.next (_ BitVec 4)) (state97.next (_ BitVec 4)) (witness_0.next (_ BitVec 1)) (state76.next (_ BitVec 16)) (state5.next (_ BitVec 1)) (state17.next (_ BitVec 16)) (input4.next (_ BitVec 1)) (input2.next (_ BitVec 1)) (input3.next (_ BitVec 1))) (=> (and (and (and (= state76 (_ bv0 16)) (= witness_0 (_ bv1 1))) (= state5 (_ bv1 1))) (= input4 (ite (not (bvult (_ bv1 16) state76)) (_ bv1 1) (_ bv0 1)))) (INV state100 state97 witness_0 state76 state5 state17 input4 input2 input3))))

(assert (forall ((state100 (_ BitVec 4)) (state97 (_ BitVec 4)) (witness_0 (_ BitVec 1)) (state76 (_ BitVec 16)) (state5 (_ BitVec 1)) (state17 (_ BitVec 16)) (input4 (_ BitVec 1)) (input2 (_ BitVec 1)) (input3 (_ BitVec 1)) (state100.next (_ BitVec 4)) (state97.next (_ BitVec 4)) (witness_0.next (_ BitVec 1)) (state76.next (_ BitVec 16)) (state5.next (_ BitVec 1)) (state17.next (_ BitVec 16)) (input4.next (_ BitVec 1)) (input2.next (_ BitVec 1)) (input3.next (_ BitVec 1))) (=> (and (INV state100 state97 witness_0 state76 state5 state17 input4 input2 input3) (let ((.def_22 (ite (= input3 (_ bv1 1)) (_ bv200 8) (_ bv0 8)))) (let ((.def_29 ((_ extract 15 15) (bvadd (concat (_ bv0 8) .def_22) (bvneg state17))))) (let ((.def_143 (= (bvcomp state100 (_ bv9 4)) (_ bv1 1)))) (let ((.def_146 (= input4 (_ bv1 1)))) (let ((.def_150 ((_ extract 17 17) ((_ zero_extend 10) .def_22)))) (and (and (and (and (and (and (and (and (and (= witness_0.next (bvnot (ite (= (ite (bvult (_ bv5 16) state76) (bvnot (bvxor input3 (ite (not (bvult ((_ zero_extend 1) (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (concat .def_29 (bvadd (concat (_ bv0 8) .def_22) (bvneg state17)))))))))))))))))) (concat .def_29 (_ bv0 31)))) (_ bv1 1) (_ bv0 1)))) (_ bv1 1)) (_ bv0 1)) (_ bv1 1) (_ bv0 1)))) (= state5 (_ bv1 1))) (= state5.next (_ bv1 1))) (= input4 (ite (not (bvult (_ bv1 16) state76)) (_ bv1 1) (_ bv0 1)))) (= input4.next (ite (not (bvult (_ bv1 16) state76.next)) (_ bv1 1) (_ bv0 1)))) (= state5.next (ite .def_146 (_ bv1 1) (ite .def_143 (ite (and (not (bvult state97 (_ bv4 4))) (not (bvult (_ bv6 4) state97))) (_ bv1 1) (_ bv0 1)) (_ bv1 1))))) (= state17.next (ite .def_146 (_ bv64 16) ((_ extract 22 7) (bvadd (_ bv64 23) (bvadd (bvmul (_ bv127 23) ((_ sign_extend 7) state17)) (concat .def_150 (concat .def_150 (concat .def_150 (concat .def_150 (concat .def_150 ((_ zero_extend 10) .def_22)))))))))))) (= state76.next (bvadd (_ bv1 16) state76))) (= state97.next (ite .def_146 (_ bv0 4) (ite .def_143 (concat (_ bv0 3) input3) (bvadd state97 ((_ zero_extend 3) input3)))))) (= state100.next (ite .def_146 (_ bv0 4) (ite .def_143 (_ bv0 4) (bvadd (_ bv1 4) state100))))))))))) (INV state100.next state97.next witness_0.next state76.next state5.next state17.next input4.next input2.next input3.next))))

(assert (forall ((state100 (_ BitVec 4)) (state97 (_ BitVec 4)) (witness_0 (_ BitVec 1)) (state76 (_ BitVec 16)) (state5 (_ BitVec 1)) (state17 (_ BitVec 16)) (input4 (_ BitVec 1)) (input2 (_ BitVec 1)) (input3 (_ BitVec 1)) (state100.next (_ BitVec 4)) (state97.next (_ BitVec 4)) (witness_0.next (_ BitVec 1)) (state76.next (_ BitVec 16)) (state5.next (_ BitVec 1)) (state17.next (_ BitVec 16)) (input4.next (_ BitVec 1)) (input2.next (_ BitVec 1)) (input3.next (_ BitVec 1))) (=> (and (INV state100 state97 witness_0 state76 state5 state17 input4 input2 input3) (not (= witness_0 (_ bv1 1)))) false)))

(check-sat)
